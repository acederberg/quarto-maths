---
title: Median of Two Sorted Arrays
description: Finding the median value of two sorted arrays.
image: /icons/leetcode/hard.svg
extra:
  image: /icons/leetcode/hard.svg
  url: /dsa/leetcode/median_two_sorted_arrays
  leetcode:
    url: /problems/median-of-two-sorted-arrays
    difficulty: hard
    submissions: [1392374237, 1392371571, 1392328615, 1392326412, 1392325232, 1392321446, 1392318871, 1392316265, 1392314607]
date: 09-16-2024
date-created: 09-16-2024
date-updated: 09-16-2024
---


[The problem statement may be found on leetcode](https://leetcode.com/problems/median-of-two-sorted-arrays/description).


## Analysis of the Problem

The basics of the algorithm are actually very straightforward - it is the edge
cases and implementation that made this quite tricky. Given the finite subsets 
$\{a_j\}$ and $\{b_k\}$ of $\mathbb{N}$ indexed in monotonic order, the algorithm is  

1. Take $j_{start} = max(j)$ and $j_{stop} = min(j)$, and likewise for $k_{start}$
   and $k_{stop}$.
2. If $j_{start} <= j_{stop}$ and $k_{start} <= k_{stop}$, look at the repective elements
   for the starts and choose the lesser element - for this element increment 
   the corresponding value of $j_{start}$ or $k_{start}$ and record the lesser 
   element $r$ - then look at the respective elements of the stops and choose 
   the greater and save it as $l$ - for this element decrement the 
   corresponding value of $j_{stop}$ or $k_{stop}$. 

   If one array has been expended, just do this for just the remaining array.
   If both have been expended, stop.

3. Repeat step 2 until $j_{start} > j_{stop}$ and $k_{start} > k_{stop}$.
4. Take the mean of $l$ and $r$.


## Implementation

My initial solution is


```{.python include="__init__.py" snippet="solution"}
```


however it did not rank very well in runtime with a sad $38\%$ or memory
with a horrific $20\%$. However, my iterated solution simplified the logic and 
removed the initial step for trivial cases and did shockingly well.
It beat $94\%$ of submissions in runtime and $99\%$ in memory.


```{.python include="__init__.py" snippet="solution"}
```



  

