[tool.poetry]
name = "acederbergio"
version = "0.2.2"
description = "Quarto demo"
authors = ["Adrian Cederberg <adrn.cederberg123@gmail.com>"]
readme = "README.md"
packages = [{ include = "acederbergio" }]

[tool.poetry.dependencies]
# NOTE: These are dependencies required to make the scripts run

motor = "^3.6.0"l
python = "^3.11"
pyyaml = "^6.0.2"
panflute = "^2.3.1"
toml = "^0.10.2"
meta-tags-parser = "^1.3.0"
typer = "^0.12.5"
pydantic = "^2.9.2"
gitpython = "^3.1.43"
yaml-settings-pydantic = "^2.3.2"
fastapi = "^0.115.5"
uvicorn = { extras = ["standard"], version = "^0.32.1" }
jinja2 = "^3.1.5"
nltk = "^3.9.1"
rake-nltk = "^1.0.6"
pypdf = "^5.2.0"
s3cmd = "^2.4.0"

[tool.poetry.group.quarto.dependencies]
# NOTE: These are dependencies required to make the notebooks work.

scikit-learn = "^1.5.1"
numpy = "^2.0.0"
jupyter-cache = "^1.0.0"
jupyter-client = "^8.6.3"
jupyter = "^1.1.1"
seaborn = "^0.13.2"
pandas = "^2.2.2"
kaggle = "^1.6.17"
kagglehub = "^0.2.9"
pyarrow = "^17.0.0"

[tool.poetry.group.dev.dependencies]
pynvim = "^0.5.2"
ipykernel = "^6.29.5"

[tool.poetry.group.torch.dependencies]
torch = { version = "^2.4.1+cpu", source = "pytorch_cpu" }
torchvision = { version = "^0.19.1+cpu", source = "pytorch_cpu" }

# NOTE: dependencies for testing and qa. The dependencies for testing data
#       structures and algorithms will be here, this way the ``blog`` folder
#       does not need to be mounted when building the scripts packages.
#       Read more here: https://python-poetry.org/docs/dependency-specification/#path-dependencies
#       It is worth noting that these will not be available from the wheel: https://github.com/python-poetry/poetry/issues/2567
[tool.poetry.group.ci.dependencies]
pyright = "^1.1.377"
pytest = "^8.3.3"
bumpver = "^2023.1129"
mypy = "^1.11.2"
ruff = "^0.6.7"
python-lsp-server = "^1.11.0"
pandas-stubs = "^2.2.2.240909"
types-pyyaml = "^6.0.12.20240917"
pytest-cov = "^5.0.0"
black = "^24.10.0"
types-requests = "^2.32.0.20241016"
types-toml = "^0.10.8.20240310"
quartodoc = "^0.9.1"
griffe-pydantic = "^1.1.0"

[[tool.poetry.source]]
name = "pytorch_cpu"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"

[tool.poetry.scripts]
acederbergio = "acederbergio.__main__:cli"

[tool.acederbergio.icons]
origin = "https://unpkg.com"

# [[tool.acederbergio.icons.sets]]
# origin = "https://"
# name = "kubernetes"

[[tool.acederbergio.icons.sets]]
destination = "devicon"
name = "@iconify-json/devicon"
version = "1.2.4"

[[tool.acederbergio.icons.sets]]
destination = "devicon-plain"
name = "@iconify-json/devicon-plain"
version = "1.2.4"

[[tool.acederbergio.icons.sets]]
destination = "hugeicons"
name = "@iconify-json/hugeicons"
version = "1.2.1"

[[tool.acederbergio.icons.sets]]
destination = "logos"
name = "@iconify-json/logos"
version = "1.2.3"

[tool.bumpver]
current_version = "0.2.2"
version_pattern = "MAJOR.MINOR.PATCH"
commit_message = "chore(version): Bump version {old_version} -> {new_version}"
commit = true
tag = true
push = false

[tool.bumpver.file_patterns]
"pyproject.toml" = ['current_version = "{version}"', 'version = "{version}"']
"docker/compose.yaml" = ["image: acederberg/blog-dev:{version}"]
"docker/compose.prod.yaml" = ["ACEDERBERG_IO_SERVER_VERSION-{version}"]

[tool.pytest.ini_options]
python_files = ["tests/*.py", "blog/dsa/**/__init__.py"]

[tool.coverage.report]
fail_under = 60
include = ["./blog/**/*.py"]
skip_covered = true
skip_empty = true
sort = "-cover"              # NOTE: Sort from least to greatest coverage.

[tool.coverage.html]
directory = ".coverage-report"
title = "Captura PyTest Coverage Report"

[tool.mypy]
overrides = [
  { module = "kagglehub.*", ignore_missing_imports = true },
  { module = "panflute.*", ignore_missing_imports = true },
  { module = "quartodoc.*", ignore_missing_imports = true },
  { module = "jsonpath_ng.*", ignore_missing_imports = true },
  { module = "nltk.*", ignore_missing_imports = true },
  { module = "rake_nltk.*", ignore_missing_imports = true },
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
