---
title: This is a Test
format:
  html:
    toc: false
    page-layout: full
    include-in-header:
      - file: ../includes/overlay.html
      - file: ../includes/tooltip.html
filters:
  - ../filters/floaty.py
floaty:
  skills:
    container:
      size_item: 64
      type: list
    tooltip:
      text: Click to learn more about my experience.
    overlay:
      include: true
      size_icon: 256
    content:
      - key: impl
        title: Software Implementation and Architecture
        since: 2017-08-01
        image:
          iconify:
            set: devicon
            name: nodejs

      - key: api
        title: APIs and Databases
        since: 2021-02-01
        image:
          iconify:
            set: devicon
            name: python
    # - title: Dashboards and UIs
    #   since: 2021-05-01
    #   image:
    #     iconify:
    #       set: devicon
    #       name: react
    #   description: |
    #     For instance, you are probably viewing this resume on my blog.
    #
    #     My blog uses a mix of server side rendering in ``python`` using
    #     ``quarto`` and ``panflute`` along with vanilla ``javascript``
    #     running in the browser to implement reactivity.
    #
    # - title: DevOps Engineering
    #   since: 2021-06-01
    #   image:
    #     iconify:
    #       set: devicon
    #       name: pulumi
    #   description: |
    #     A service is not useful or accessable unless it is deployed, and
    #     deploying a website manually is a thing of the past. Automation is
    #     mandatory for buliding reliable and secure products.
---

## Accordian Tests

```{=html}
<div class="accordion" id="accordionExample">
  <div class="accordion-item">
    <h2 class="accordion-header">
      <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
        Accordion Item #1
      </button>
    </h2>
    <div id="collapseOne" class="accordion-collapse collapse show" data-bs-parent="#accordionExample">
      <div class="accordion-body">
        <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.
      </div>
    </div>
  </div>
</div>
```

## Tooltip

[This is a link to my blog](https://acederberg.io){data-bs-toggle="tooltip" data-bs-title="Click here to see my blog!"}

## Skills

<!-- Start Skills --> :::::: { #skills }

<!-- Start Overlay --> ::::: { .overlay }
<!-- Start Overlay Content --> :::: { .overlay-content }
<!-- Start API --> ::: { .overlay-content-item data-key="api" }

Data storage and retrieval is an essentail part of all modern web applications.
I have plenty of experience developing APIs and ETLs in languages like
`python` <iconify-icon icon="devicons:python"></iconify-icon>
and `nodejs` <iconify-icon icon="devicons:nodejs"></iconify-icon>
using database technologies such as
`mysql` <iconify-icon icon=devicon:mysql></iconify-icon>,
`mongodb` <iconify-icon icon=devicon:mongodb></iconify-icon>,
and `redis` <iconify-icon icon=devicon:redis></iconify-icon>.

<!-- End API ----------> :::
<!-- Start Impl -------> ::: { .overlay-content-item data-key="impl" }

I have been seriously writing code since about 2017 (and a little before).

Through my various projects I have developed habits condusive to building and shipping projects.
I always:

1. have a plan and a timeline,
2. enforce effective design patterns and testing,
3. and use version control.

<!-- End Impl --> :::
<!-- End Overlay Conent --> ::::
<!-- End Overlay --> :::::
<!-- End Skills --> ::::::
