---
title: My Blog
format:
  html:
    include-in-header:
      - file: ../../includes/overlay.html
filters:
  - floaty.py
floaty:
  blog-thank-you-tools:
    size: 128px;
    content:
      - image:
          iconify:
            set: misc
            name: quarto
            label: Quarto
            title: Quarto
      - image:
          iconify:
            set: devicon
            name: latex
            label: Latex
            title: Latex
        description: |
          Without TeX, I would have to write my resume in Microsoft word.
          Since I do all of my work on a linux machine, I could have used libre
          word, however I generally like not to use such tools since they do
          not produce documents that play well with git
          {{< iconify devicon git >}}.

          **Using a GUI text editor - This is one of the few fates I believe to
          be worse than death.**\n"
      - image:
          iconify:
            set: devicon
            name: pulumi
            label: Pulumi
            title: Pulumi
        description: |
          Pulumi is a great infrastructure as code tool available in most
          popular lanugages. I use it to provision the kubernetes cluster
          that this blog runs on and set up paripheral resources. I also use
          it to manage kubernetes resources, such as traefik and the error
          pages. <iconify-icon icon="logos:kubernetes"></iconify-icon>
      - image:
          iconify:
            set: logos
            name: github-icon
            label: Github
            title: Github
      - image:
          iconify:
            set: devicon
            name: git
            label: Git
            title: Git
      - image:
          iconify:
            set: devicon
            name: neovim
            label: Neovim
            title: Neovim
      - image:
          iconify:
            set: devicon
            name: python-wordmark
            label: Python
            title: Python
      - image:
          iconify:
            set: devicon
            name: nodejs-wordmark
            label: Nodejs
            title: Nodejs
      - image:
          iconify:
            set: misc
            name: mermaid
            label: Mermaidjs
            title: Mermaidjs
      - image:
          iconify:
            set: logos
            name: linode
            label: Linode
            title: Linode
      - image:
          iconify:
            set: logos
            name: kubernetes
            label: Kubernetes
            title: Kubernetes
      - image:
          iconify:
            set: devicon
            name: pandas-wordmark
            label: Pandas
            title: Pandas
      - image:
          iconify:
            set: devicon
            name: kaggle-wordmark
            label: Kaggle
            title: Kaggle
      - image:
          iconify:
            set: devicon
            name: docker-wordmark
            label: Docker
            title: Docker
---

Here I discuss the implementation of this blog itself as it has been quite a project to do so.
This is my blog that you are likely viewing this on.
In my time making this, I have learned quite a bit about [quarto](https://quarto.org) {{< iconify misc quarto >}},
an amazing markup and notebook format for websites, jupyter notebooks, books, articles, and more.
Almost all blog pages and navigation in this blog is authored using quarto.

In this time, I have also had quite some fun figuring out how to to implement

- continuous integration and continuous deployment for this project using github actions {{< iconify logos github-actions>}},
- a `docker` {{< iconify logos docker-icon >}} image that accomodates `kaggle` {{< iconify logos kaggle >}} api calls and mounting of other secrets duing the build using secrets,
- and how to create diagrams with [mermaid {{< iconify misc mermaid >}}](https://mermaid.js.org) and [iconify](https://iconify.design).

Further, there are associated projects (in the sidebar) that support this project.
For instance

- the [my neovim configuration](../nvim-config/index.qmd) is designed to make editing `quarto` documents very easy,
- and the [infrastructure and automation project](../automation) where [pulumi {{< iconify logos pulumi-icon >}}](https://pulumi.com/) and `python` {{< iconify logos python >}} are used to [deploy](./deploy.qmd) the infrastructure to linode {{< iconify logos linode >}}.

## The Tools That Make it Possible

Thank you to all of the contributors to the tools I have used that made this possible at all!
I cannot emphasize enought that without the tremendous efforts of the open source community (in particular) that this would not be possible at all.
Click on any of the icons below to see a brief description of how each tool is utilitized here.

::: { #blog-thank-you-tools .floaty-container }

:::

<script>
  /* 
    NOTE: Want to render all of these directly into the overlay.
          This will require that the filter injects the overlay.
          Each floaty container will have its own overlay, which will have
          its own toggles.
          This overlay will hold all of the html, just most of it will be
          hidden. I would like to think that this is cleaner than manipulating
          the DOM like this.
  */
  let overlay = document.getElementById("overlay")
  let overlay_content = document.getElementById("overlay-content")

  function createOnClickIcon(item)
  {
    let paragraphs = Array.from(item.getElementsByTagName("p"))

    return function onClickSvg()
    {
      // https://stackoverflow.com/questions/3955229/remove-all-child-elements-of-a-dom-node-in-javascript
      overlay_content.innerHTML = ''
      paragraphs.map(paragraph => {
        // Add the wrapped icon, get the iconify icon and use ``ariaLabel`` to
        // recover the content to be put below the icon.
        overlay_content.appendChild(paragraph.cloneNode(true))

        let icon = Array.from(overlay_content.getElementsByTagName("iconify-icon"))[0]
        icon.classList.add("floaty")

        let head = document.createElement("h1")
        head.innerHTML = icon.ariaLabel
        overlay_content.appendChild(head)

        let content = document.createElement("p")
        let content_data = overlay_content_data[icon.ariaLabel] 
        if (content_data) content.innerHTML = content_data
        overlay_content.appendChild(content)


        // overlay_content.add("h1")

      })
      showOverlay()
    }
  }

  Array.from(
    document
      .getElementById("blog-thank-you-tools")
      .getElementsByTagName("li")
  )
    .map(
      item => item.addEventListener("click", createOnClickIcon(item))
    )
</script>

## Thank You to the Reviewers

Thank you to all of my reviewers for their hard work in reviewing and consulting:

::: {}

- [Chris "that Chris" Sanchez]()
- John "Bud" Poston

:::

## Why Have a Blog?

I have always been really into taking notes, so I thought it would be good to get away from paper.
Working with web pages offers much more flexibility a features than using paper notes and allows me to share them with ease.

### About `leetcode`

![Leetcode logo](/icons/leetcode/default.svg){fig-align="center" width="256px"}

Data structures and algorithms is a useful subject matter to be knowledgable about in computer science and software.
Additionally, the subject matter is frequently quized in SDE technical interviews.
Since I am currently applying for jobs and working on `leetcode` problems, I figured I should start to do some for practice.
I also wanted to have a record of the problem which I had done and to take more extensive notes on the things that I did not understand or found interesting.

### About the Resume

![Quarto logo](/icons/quarto.svg){fig-align=center width=256px}

I thought it might be helpful to have all of the resumes I distribute contain a link to the most recent version of [my resume](/resume).
To make this possible, I would have to host it somewhere and thought my blog would be the most suitable place.
This came with a number of benefits, such as

- having version control over my resume,
- rendering into multiple formats like `TeX`, `PDF`, and `HTML`,
- integration of the resume into something I'd be working on frequently,
- being able to edit in my favorite tool `nvim` instead of [overleaf](https://overleaf.com),
- having the projects described in the resume have corresponding pages on the same website,
- having auxilary content available for the resume when everything might not fit.

### About the Projects

![Github logo](/icons/github.svg){fig-align=center width=256px}

I've made a few projects (including this blog) which I wanted to showcase here.
Each of these will have their own page dedicated them, and should be available in the sidebar.
For some of the larger projects there might be extensive documentation.

To learn more about the technical details, see the subsequent pages.
