services:
  db:
    image: mongo
    restart: always
    ports:
      - target: 27017
        published: 27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: '${ACEDERBERG_IO_MONGO_ROOT_PASSWORD-changeme}'
    volumes:
      - ~/.blog/data:/data/db
  server:
    build:
      context: ..
      dockerfile: docker/dockerfile
      target: develop
    container_name: quarto-server
    command:
      - bash
      - -c
      - 'source /home/docker/.bashrc && acederbergio serve dev'
    depends_on:
      db:
        condition: service_started
    environment:
      KAGGLE_CONFIG_DIR: /home/docker/app/config/kaggle
      ACEDERBERG_IO_LOG_LEVEL: ${ACEDERBERG_IO_LOG_LEVEL-INFO}
    image: acederberg/blog-dev:0.2.2
    # NOTE: Because dipping into swap memory can crash a standard laptop these
    #       limitations are imposed.
    mem_swappiness: 0
    mem_reservation: 4G
    mem_limit: 4G
    ports:
      - name: fastapi
        target: 3000
        published: 3000
      - name: logs
        target: 3030
        published: 3030
    tty: true
    volumes:
      - ~/.blog/venv:/home/docker/.venv
      - ..:/home/docker/app
      # - '.kaggle-cache:/home/docker/.cache/kagglehub'
      # # NOTE: Because don't want to overwrite local and don't want to reinstall
      # #       every time. If there are permissions issues with the volume, just
      # #       do ``rm -r ./docker/.venv`` on the host system.
      # - /home/docker/app/docker/.venv
      # - /home/docker/app/docker/.data
      # # - 'kaggle.json:/home/quarto/.config/

  # NOTE: This is not required, but can be helpful in container monitoring.
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro

  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #   command:
  #     - --config.file=/etc/prometheus/prometheus.yml
  #
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3001:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana-data:/var/lib/grafana

volumes:
  grafana-data:
