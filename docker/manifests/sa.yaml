apiVersion: v1
kind: Namespace
metadata:
  name: blog
  annotations:
    kubernetes.io/enforce-mountable-secrets: 'true'
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
---
# start snippet service_account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: blog-gh-act
  namespace: blog
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: blog-gh-act
  namespace: blog
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
rules:
  - apiGroups:
      - ''
      - apps
    resources:
      - namespaces
      - deployments
      - replicasets
      - services
      - secrets
    verbs:
      - get
      - list
      - watch
      - create
      - update
      - patch
      - delete
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: blog-gh-act
  namespace: blog
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
roleRef:
  kind: ClusterRole
  name: blog-gh-act
subjects:
  - kind: ServiceAccount
    name: blog-gh-act
    namespace: blog
---
apiVersion: v1
kind: Secret
metadata:
  name: blog-gh-act-token
  namespace: blog
  annotations:
    kubernetes.io/service-account.name: blog-gh-act
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
type: kubernetes.io/service-account-token
# end snippet service_account
---
apiVersion: v1
kind: Service
metadata:
  name: blog
  namespace: blog
  labels:
    acederberg.io/environment: preview
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
spec:
  selector:
    acederberg.io/environment: production
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
  ports:
    - targetPort: 8080
      port: 80
---
apiVersion: v1
kind: Service
metadata:
  name: blog-preview
  namespace: blog
  labels:
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
spec:
  selector:
    acederberg.io/environment: preview
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
  ports:
    - targetPort: 8080
      port: 80
# start snippet traefik
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: blog
  namespace: blog
  labels:
    acederberg.io/environment: production
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
spec:
  tls:
    certResolver: letsencrypt
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: HOST(`blog.acederberg.io`) || Host(`acederberg.io`)
      middlewares:
        - name: traefik-ratelimit
          namespace: traefik
        - name: traefik-error-pages
          namespace: traefik
      services:
        - kind: Service
          name: blog
          namespace: blog
          port: 80
# end snippet traefik
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: blog-preview
  namespace: blog
  labels:
    acederberg.io/environment: preview
    acederberg.io/tier: browser
    acederberg.io/from: kubectl
    acederberg.io/component: blog
spec:
  tls:
    certResolver: letsencrypt
  entryPoints:
    - websecure
  routes:
    - kind: Rule
      match: HOST(`preview.acederberg.io`)
      middlewares:
        - name: traefik-ratelimit
          namespace: traefik
        - name: traefik-error-pages
          namespace: traefik
      services:
        - kind: Service
          name: blog-preview
          namespace: blog
          port: 80
