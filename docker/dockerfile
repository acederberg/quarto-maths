# NOTE: Borrowed from https://github.com/analythium/quarto-docker-examples/blob/main/Dockerfile.base
#       This is not optimal for CI, the image is huge and will be slow af in actions/pipelines.
#       Further, installing pip and venv is horrendous on ubuntu. *(It should work out of the box!)*
FROM eddelbuettel/r2u:22.04 AS quarto

RUN apt-get update \
  && apt-get install \
    --yes \
    --no-install-recommends \
    aspell \
    aspell-en \
    pandoc \
    pandoc-citeproc \
    curl \
    gdebi-core \
    python3.10-venv \
  && rm -rf /var/lib/apt/lists/*

RUN install.r \
    shiny \
    jsonlite \
    ggplot2 \
    htmltools \
    remotes \
    renv \
    knitr \
    rmarkdown \
    quarto

# ARG QUARTO_VERSION="0.9.522"
# RUN curl -o quarto-linux-amd64.deb -L https://github.com/quarto-dev/quarto-cli/releases/download/v${QUARTO_VERSION}/quarto-${QUARTO_VERSION}-linux-amd64.deb
RUN curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb
RUN gdebi --non-interactive quarto-linux-amd64.deb

CMD ["bash"]


# --------------------------------------------------------------------------- #
FROM quarto AS develop

RUN mkdir -p /home/docker /home/docker/.venv \
  && chown -R docker:docker /home/docker

USER docker 
WORKDIR /home/docker

# NOTE: Assumes that build is occuring at the project root.
COPY --chown=docker:docker ./docker/docker.sh /home/docker/.bashrc

CMD ["bash"]


# --------------------------------------------------------------------------- #
FROM quarto AS builder


# NOTE: Assumes that build is occuring at the project root.
WORKDIR /quarto/app
ENV ACEDERBERG_IO_VENV="/quarto/.venv" \
  ACEDERBERG_IO_WORKDIR="/quarto/app" \
  ACEDERBERG_IO_BUILD_LOG="/quarto/app/build/build.log" \
  KAGGLE_CONFIG_DIR="/quarto"


# NOTE: Keep building steps after this point. The steps above should only rerun
#       when ``poetry-lock.toml``, ``pyproject.toml``, or ``docker`` changes.
COPY ./pyproject.toml ./poetry.lock /quarto/app
RUN \
  --mount=type=cache,target=$ACEDERBERG_IO_VENV \ 
  mkdir --parents $ACEDERBERG_IO_WORKDIR/build $ACEDERBERG_IO_VENV \
  && python3.10 -m venv $ACEDERBERG_IO_VENV \
  && bash -c "\
    source $ACEDERBERG_IO_VENV/bin/activate \
    && python3.10 -m pip install poetry \
    && poetry install --with scripts \
  " 


# NOTE: A build time secret is required for the kaggle stuff, which is kind of 
#       a pain ngl.
#       
#       - https://docs.docker.com/build/building/secrets/
#
#       An example of how to build this in a pipeline would  be 
#
#       ```sh
#        docker build --tag acederberg/quarto-blog-builder \
#        --file ./docker/dockerfile \
#       --secret id=kaggle_json,src=./config/kaggle/kaggle.json . \
#        --secret id=google_tracking_id,env=ACEDERBERG_IO_GOOGLE_TRACKING_ID
#       ```
COPY ./blog /quarto/app/blog
COPY ./scripts /quarto/app/scripts

ARG ACEDERBERG_IO_BUILD_GIT_COMMIT
ARG ACEDERBERG_IO_BUILD_GIT_REF
ARG ACEDERBERG_IO_GOOGLE_TRACKING_ID
ENV \
  ACEDERBERG_IO_BUILD_GIT_COMMIT="${ACEDERBERG_IO_BUILD_GIT_COMMIT}" \
  ACEDERBERG_IO_BUILD_GIT_REF="${ACEDERBERG_IO_BUILD_GIT_REF}" \
  ACEDERBERG_IO_GOOGLE_TRACKING_ID="${ACEDERBERG_IO_GOOGLE_TRACKING_ID}" \
  ACEDERBERG_IO_DRY="0"

RUN \
  --mount=type=cache,target=$ACEDERBERG_IO_VENV \ 
  --mount=type=secret,id=kaggle_json,target=/quarto/kaggle.json,required \
  --mount=type=secret,id=google_tracking_id,env=ACEDERBERG_IO_GOOGLE_TRACKING_ID,required \
  bash -c "\ 
    source $ACEDERBERG_IO_VENV/bin/activate \
    && poetry run python -m scripts.config \
    && ls /quarto/kaggle.json \
    && cd /quarto/app/blog \
    && quarto add quarto-ext/include-code-files --no-prompt \
    && quarto render" >> $ACEDERBERG_IO_BUILD_LOG


# --------------------------------------------------------------------------- #
# https://hub.docker.com/_/node/tags

FROM node:lts-alpine3.20 AS production

USER node

WORKDIR /app
RUN npm install http-server
COPY --from=builder /quarto/app/blog/build /app/build

CMD ["npx", "http-server", "--port", "8080", "--proxy", "https://errors.acederberg.io/404.html", "/app/build"]

